use robot as knowledge.

module robotEvents {
	% Update the agent's state of movement.
	if bel(state(State)), percept(state(NewState))
		then delete(state(State)) + insert(state(NewState)).

	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(not(in(Place))) do delete( in(Place) ).

	% Exercise 2.1b: insert rules for handling percepts other than "sendonce" percepts.

	% Update sequenceIndex
	if bel(sequenceIndex(Old)), percept(sequenceIndex(New)) then
			delete(sequenceIndex(Old)) + insert(sequenceIndex(New)).

	forall bel(at(OldLcoation)), percept(at(Location))
			do delete(at(OldLcoation)) + insert(at(Location)).

	% Insert atBlock into the belief base
	if percept(atBlock(Block))
			then insert(atBlock(Block)).
		
	% Remove atBlock from the belief base
	forall percept(not(atBlock(Block)))
			do delete(atBlock(Block)).
			
	% Exercise 2.5b: insert code for goal management that allows an agent to systematically search for blocks. (if needed)
	forall percept(color(Block, Color)), percept(in(Room)) 
			do insert ( block(Block, Room) ) + insert(color(Block, Color) ).
			
	forall percept(in(Room)), percept(not(visited(Room)))
			do insert(visited(Room)).
	
	% Exercise 2.6b: insert code for goal management that makes the agent deliver a block when it 
	%   knows about a block that can be delivered. (if needed)
	forall percept(holding(Block)), percept(in(Room))
			do insert(holding(Block)) + delete(block(Block, Room)).

}
